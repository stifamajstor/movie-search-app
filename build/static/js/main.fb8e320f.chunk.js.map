{"version":3,"sources":["components/Nav.js","components/SearchBox.js","components/Movie.js","components/MovieList.js","components/Pagination.js","components/MovieInfo.js","components/App.js","serviceWorker.js","index.js"],"names":["Nav","className","href","SearchBox","props","style","paddingTop","paddingBottom","onSubmit","handleSubmit","action","placeholder","onChange","handleChange","list","name","type","id","movies","map","movie","key","value","title","Movie","image","src","alt","width","height","onClick","viewMovieInfo","movieId","MovieList","overview","poster_path","date","release_date","Pagination","pageLinks","i","active","currentPage","push","nextPage","pages","MovieInfo","closeMovieInfo","cursor","marginLeft","currentMovie","substring","split","concat","join","vote_average","App","e","clearTimeout","submit","setTimeout","preventDefault","setState","searchString","target","pageNumber","axios","get","apiKey","state","then","data","results","totalResults","total_results","filteredMovie","forEach","numberPages","Math","floor","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fb8e320f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../nav.css\";\n\nconst Nav = () => {\n  return (\n    <nav className=\"nav\">\n      <div className=\"nav-wrapper container\">\n        <a href=\"#\" className=\"brand-logo\">\n          moviesSearch\n        </a>\n      </div>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\n\nconst SearchBox = props => {\n  return (\n    <div className=\"container\" style={{ paddingTop: 30, paddingBottom: 30 }}>\n      <div className=\"row\">\n        <section className=\"test col s4 offset-s4\">\n          <form onSubmit={props.handleSubmit} action=\"\">\n            <div className=\"input-field\">\n              <input\n                placeholder=\"Search movie\"\n                onChange={props.handleChange}\n                list=\"search\"\n                name=\"search\"\n                type=\"text\"\n                className=\"validate\"\n              />\n              <datalist id=\"search\">\n                {props.movies.map(movie => {\n                  return <option key={movie.id} value={movie.title} />;\n                })}\n              </datalist>\n            </div>\n          </form>\n        </section>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Movie = props => {\n  return (\n    <div className=\"col s12 m6 l3\">\n      <div className=\"card\">\n        <div className=\"card-image waves-effect waves-block waves-light\">\n          {props.image === null ? (\n            <img\n              src={`https://s3-ap-southeast-1.amazonaws.com/upcode/static/default-image.jpg`}\n              alt=\"Movie card\"\n              style={{ width: \"100%\", height: 360 }}\n            />\n          ) : (\n            <img\n              src={`http://image.tmdb.org/t/p/w185${props.image}`}\n              alt=\"Movie card\"\n              style={{ width: \"100%\", height: 360 }}\n            />\n          )}\n        </div>\n        <div className=\"card-content\">\n          <p>\n            <a href=\"#\" onClick={() => props.viewMovieInfo(props.movieId)}>\n              View Details\n            </a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Movie;\n","import React from \"react\";\nimport Movie from \"./Movie\";\n\nconst MovieList = props => {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col s12\">\n          {props.movies.map(movie => {\n            return (\n              <Movie\n                key={movie.id}\n                viewMovieInfo={props.viewMovieInfo}\n                movieId={movie.id}\n                title={movie.title}\n                overview={movie.overview}\n                image={movie.poster_path}\n                date={movie.release_date}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieList;\n","import React from \"react\";\n\nconst Pagination = props => {\n  let pageLinks = [];\n\n  for (let i = 1; i <= props.pages + 1; i++) {\n    let active = props.currentPage === i ? \"active\" : \"\";\n    pageLinks.push(\n      <li\n        className={`waves-effect ${active}`}\n        key={i}\n        onClick={() => props.nextPage(i)}\n      >\n        <a href=\"#!\">{i}</a>\n      </li>\n    );\n  }\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <ul className=\"pagination\">\n          {props.currentPage > 1 ? (\n            <li\n              className=\"waves-effect\"\n              onClick={() => props.nextPage(props.currentPage - 1)}\n            >\n              <a href=\"#!\">Prev</a>\n            </li>\n          ) : (\n            \"\"\n          )}\n          {pageLinks}\n          {props.currentPage < props.pages + 1 ? (\n            <li\n              className=\"waves-effect\"\n              onClick={() => props.nextPage(props.currentPage + 1)}\n            >\n              <a href=\"#!\">Next</a>\n            </li>\n          ) : (\n            \"\"\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default Pagination;\n","import React from \"react\";\n\nconst MovieInfo = props => {\n  return (\n    <div>\n      <div className=\"container\">\n        <div\n          className=\"row\"\n          onClick={props.closeMovieInfo}\n          style={{ cursor: \"pointer\", paddingTop: 50 }}\n        >\n          <i className=\"fas fa-arrow-left\"></i>\n          <span style={{ marginLeft: 10 }}>Go back</span>\n        </div>\n        <div className=\"row\">\n          <div className=\"col s12 m4\">\n            {props.currentMovie.poster_path === null ? (\n              <img\n                src={`https://s3-ap-southeast-1.amazonaws.com/upcode/static/default-image.jpg`}\n                alt=\"Movie card\"\n                style={{ width: \"100%\", height: 360 }}\n              />\n            ) : (\n              <img\n                src={`http://image.tmdb.org/t/p/w185${props.currentMovie.poster_path}`}\n                alt=\"Movie card\"\n                style={{ width: \"100%\", height: 360 }}\n              />\n            )}\n          </div>\n          <div className=\"col s12 m8\">\n            <div className=\"info-container\">\n              <p>{props.currentMovie.title}</p>\n              <p>\n                {props.currentMovie.release_date\n                  .substring(8)\n                  .split(\"-\")\n                  .concat(\n                    props.currentMovie.release_date.substring(5, 7),\n                    props.currentMovie.release_date.substring(0, 4)\n                  )\n                  .join(\"/\")}\n              </p>\n              <p>\n                About: <br />\n                {props.currentMovie.overview}\n              </p>\n              <p>Rate: {props.currentMovie.vote_average}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieInfo;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"../App.css\";\nimport Nav from \"./Nav\";\nimport SearchBox from \"./SearchBox\";\nimport MovieList from \"./MovieList\";\nimport Pagination from \"./Pagination\";\nimport MovieInfo from \"./MovieInfo\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      movies: [],\n      totalResults: 0,\n      searchString: \"\",\n      currentPage: 1,\n      currentMovie: null\n    };\n    this.apiKey = \"b6dfbe28aa96652b7fd0f86b1f259b87\";\n  }\n\n  handleChange = e => {\n    clearTimeout(this.submit);\n    this.submit = setTimeout(() => {\n      this.handleSubmit();\n    }, 1000);\n    e.preventDefault();\n    this.setState({ searchString: e.target.value });\n  };\n\n  handleSubmit = pageNumber => {\n    axios\n      .get(\n        `https://api.themoviedb.org/3/search/movie?api_key=${this.apiKey}&query=${this.state.searchString}&page=${pageNumber}`\n      )\n      .then(data => {\n        this.setState({\n          movies: [...data.data.results],\n          totalResults: data.data.total_results,\n          currentPage: pageNumber\n        });\n      });\n  };\n\n  viewMovieInfo = id => {\n    let filteredMovie;\n    this.state.movies.forEach(movie => {\n      if (movie.id === id) {\n        filteredMovie = movie;\n      }\n    });\n    this.setState({ currentMovie: filteredMovie });\n  };\n\n  closeMovieInfo = () => {\n    this.setState({ currentMovie: null });\n  };\n\n  render() {\n    let numberPages = Math.floor(this.state.totalResults / 20);\n    return (\n      <div>\n        <Nav />\n        {this.state.currentMovie === null ? (\n          <div>\n            <SearchBox\n              handleSubmit={this.handleSubmit}\n              handleChange={this.handleChange}\n              movies={this.state.movies}\n            />\n            <MovieList\n              viewMovieInfo={this.viewMovieInfo}\n              movies={this.state.movies}\n            />\n          </div>\n        ) : (\n          <MovieInfo\n            closeMovieInfo={this.closeMovieInfo}\n            currentMovie={this.state.currentMovie}\n          />\n        )}\n        {this.state.totalResults > 20 && this.state.currentMovie === null ? (\n          <Pagination\n            pages={numberPages}\n            nextPage={this.handleSubmit}\n            currentPage={this.state.currentPage}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}